Introduction to Service Discovery with Consul

16 June 

Andrew Watson
Director of Core Engineering, Ionic Security
andy@ionicsecurity.com
@andrewwatson

* What is Service Discovery

Service Discovery is dynamically configuring your external dependencies at run time

_Why?_

It decouples pieces of your stack from each other so they can grow horizontally as needed without interrupting your application


* The bad old days

First really busy site that I launched:
February 2001 - SpeedTV.com

1 month to construct the site and Content Management in PHP before the Daytona 500
2 Apache web servers, 1 MySQL server
400,000 unique daily visitors

Database location, credentials hard coded in an include file. 


The night of the launch, the new URL was flashed on TV and the site crashed.
There wasn't much we could do!

* Fixes

- Offloading static resources away from Apache/PHP
- Turned off persistent connections
- Started pre-rendering heavily dynamic pages and serving them up as static content
- MySQL tuning

_Eventually..._
New hardware took weeks to order/configure/install in order to handle future growth.

* If this happened today

Using virtual machines would have made it easy to add resources at each layer of the stack but only if you can add/remove them seemlessly

When you spin up a new web server you have to configure the load balancing infrastructure

New Database servers have to be advertised to the web servers, especially if they take over the master role in a replication scheme.

But How?

* Configuration Management

- Manual Update:
You could always just ssh into every affected server and update configurations and restart processes but being "5 nines" means so little downtime (5.26 minutes per year) that human intervention is impossible

.link [http://en.wikipedia.org/wiki/High_availability] 99.999% Uptime

- Zookeeper, etcd, SkyDNS, Chef, Puppet, Nagios etc...

All have different capabilities but come with their own limitations
1. SkyDNS depends on heartbeats and TTLs
2. Puppet/Chef are configuration management tools, not Service Discovery tools so don't update frequently enough to manage failed nodes

* Serf

First released in October 2013

Uses Gossip protocol to chat about events.  Each node talks to other nodes to determine the status of the system

Events like "member_join" are passed around and hook scripts on each node look at event information and decide if they care about the event or the node type that fired it.

Example: haproxy node sees a new web server join the cluster, updates its haproxy configuration and restarts haproxy

.link http://www.serfdom.io/
.link http://en.wikipedia.org/wiki/Gossip_protocol

* Serf Limitations

Hook scripts have to update configurations but for every type of application this means a different type of script to maintain lists of IPs 

Stinks having to restart applications or write code that's constantly re-reading its configuration from a file (slow!)

* SkyDNS

Update DNS records by making HTTP calls to register services running on nodes

Relies on TTLs set with each HTTP request.  If the TTL is reached the service is de-listed.

* "SkySerf"

I had an idea to combine the event hook scripts in Serf with the HTTP calls in SkyDNS so that when a node joined or left the cluster that the DNS entry for that collection of services would update automatically.  I was going to call it SkySerf.  Maybe.

I started talking to the team at Hashicorp about it and they showed me a project they'd started but not unveiled yet that worked like my idea.  

That project was Consul.

* Consul

Consul combines service discovery, health checks, and a key value store into one application. 

All nodes expose HTTP, RPC and DNS interfaces and communicate with each other using the Gossip Protocol

Client nodes register services and health checks with the server nodes

Server nodes use Raft to maintain a consensus on status of nodes and services

* Defining Services for Consul

Multiple service definitions can be created when the consul agent starts up

.code service.json

or via HTTP request

   curl -X PUT http://localhost:8500/v1/agent/service/register --data-binary @service.json

* Finding Services via Consul

The most common way to find services in Consul is via DNS query:

   dig @127.0.0.0 -p 8600 redis.service.consul

or via HTTP

	curl http://localhost:8500/v1/catalog/services/redis

* Health Checks

If you associate a health check script with a service then a non-zero exit from that health check on a node will mark that service as failed on that node

The advertised IP of that service on that node will no longer be served up via DNS records

This is much faster than your typical load balancer health check

* INTERNALS

Time to get a little dirty

* RAFT

Only Consul Server nodes participate in Raft

Keeps the need for a quorum down even as the number of client nodes increases

Server nodes forward queries to the current leader ❖

Client nodes forward all queries to Server nodes


❖ unless stale reads are allowed

* Log

An ordered sequence of entries

The primary work unit in any distributed system is a replicated log which means that all nodes agree on what is in the log and what order they are in

.image raft.jpeg _ 400

* Finite State Machine

A collection of states and the defined transitions between them

.image fsm.jpeg

Application of the same sequence of logs must result in the same state (deterministic)

* Quorum

A majority of members from a set of peers

For example, if there are 5 members in the peer set, we would need 3 nodes to form a quorum

New logs cannot be committed if there isn't a quorum because a leader cannot be selected

* Leader

The leader is responsible for ingesting new log entries, replicating to followers

Nodes transition from follower to candidate if there aren't any new log entries for some amount of time

In Candidate mode they request votes from other nodes to become leader

If they get a quorum of votes they become the leader and can log entries and replicate to the followers

* Gossip

Gossip in Consul is based off the same library as [[http://serfdom.io][Serf]] which is based on [[http://www.cs.cornell.edu/~asdas/research/dsn02-swim.pdf][SWIM]] or 

Scalable Weakly-consistent Infection-style Process Group Membership

Gossip is done over UDP but Serf/Consul add periodic complete state exchanges over TCP to get faster convergence on new state of the cluster

* Links
- Protocols
.link [http://en.wikipedia.org/wiki/Gossip_protocol] Gossip Protocol
.link [http://bit.ly/ConsensusProtocol] Consensus Protocol
.link [https://ramcloud.stanford.edu/wiki/download/attachments/11370504/raft.pdf] Raft PDF

- Software
.link [https://github.com/skynetservices/skydns] SkyDNS
.link [http://www.consul.io/] Consul
.link [http://www.consul.io/intro/vs/index.html] Consul vs. The World